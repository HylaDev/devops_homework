name: Build and push docker images

on:
  
  pull_request:
    branches:
      - main
  

jobs:
  test-unitaires:
    runs-on: ubuntu-latest

    steps:
      # Récupération du code source
      - name: Checkout du code source
        uses: actions/checkout@v2

      # Configuration de l'environnement Node avec la version 16
      - name: Configuration de Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        
      # Installation des dépendances Node.js dans le répertoire test
      - name: Installation des dépendances
        run: npm install
        working-directory: test

      # Exécution des tests unitaires
      - name: Exécution du test
        run: npm test
        working-directory: test

  analyse-statique:
    runs-on: ubuntu-latest

    steps:
      # Récupération du code source
      - name: Checkout du code source
        uses: actions/checkout@v2

      # Configuration de l'environnement Python avec la version 3.10
      - name: Configuration de Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # Installation de Semgrep pour l'analyse statique du code
      - name: Installation de Semgrep
        run: pip install semgrep

      # Exécution de l'analyse statique avec Semgrep
      - name: Exécution de Semgrep
        run: semgrep --config auto

  scan-securite:
    runs-on: ubuntu-latest

    steps:
      # Récupération du code source
      - name: Checkout du code source
        uses: actions/checkout@v2

      # Configuration de l'environnement Node.js avec la version 16.x
      - name: Configuration de Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      # Installation des dépendances Node.js
      - name: Installation des dependances
        run: npm install

      # Installation de npm-audit globalement
      - name: Installation de npm-audit
        run: npm install -g npm-audit

      # Exécution de l'audit de sécurité npm
      - name: Run npm audit
        run: npm audit --production

  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Récupération du code source
    - name: Checkout du code source
      uses: actions/checkout@v2

    # Configuration de l'environment Node avec la version 16
    - name: Configuration de node
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    # Installation des dépendances
    - name: Installation des dépendances
      run: npm install

    # Analyse du dockerfile avec Hadolint
    - name: Analyse du dockerfile avec Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

    # Configuration de Docker Buildx
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Connexion à Docker Hub avec les identifiants secrets
    - name: Connexion à Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Construction et push de l'image Docker vers Docker Hub
    - name: Build and push de l'image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest

  scan-security-trivy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    # Récupération du code source
    - name: Checkout du code source
      uses: actions/checkout@v2
    
    # Installation de trivy pour l'analyse de sécurité de l'image Docker
    - name: Installation de Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    # Scan de l'image Docker avec Trivy pour détecter les vulnérabilités
    - name: Scan de l'image docker avec trivy
      env:
        IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
      run: trivy image $IMAGE_NAME